<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Preface</title>
    <url>/2024/12/20/Preface/</url>
    <content><![CDATA[<p>各位师傅好 我是一名ctfer Re选手 隶属于某不知名小战队 活跃在各大比赛之中 最近想进阶一下自己的逆向技术 <span id="more"></span><br>整理了各大比赛的Re题目 并在近期准备学习一下 不会的题目稍后复现 在此期间也想学习pwn的一些知识 所以这个博客记录一下这些Re题目的wp 也作为一个pwn知识笔记 后续参加各大比赛和公开赛的wp也会放在这里 以便自己学习和参考 也希望有地方可以帮助到各位师傅</p>
]]></content>
  </entry>
  <entry>
    <title>2024 ciscn&amp;ccb Re wp</title>
    <url>/2024/12/20/2024-ciscn-ccb-Re-wp/</url>
    <content><![CDATA[<h1 id="dump"><a href="#dump" class="headerlink" title="dump"></a>dump</h1><p>运行程序 输入几个字符 观察回显</p>
<p><img src="/../images/image1-1734689935552-1.png" alt="image1"></p>
<p>随后看了一下flag头的映射</p>
<span id="more"></span>

<p><img src="/../images/image2-1734689953905-3.png" alt="image2"></p>
<p>跟flag的前几位一样</p>
<p><img src="/../images/image3-1734689962295-5.png" alt="image3"></p>
<p>发现是单字节加密 所以将所有的可打印字符输入进去dump一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import string  </span><br><span class="line">all_char = string.printable  </span><br><span class="line">print(all_char)</span><br><span class="line">#0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!&quot;#$%&amp;&#x27;()*+,-./:;&lt;=&gt;?@[\]^_`&#123;|&#125;~ 	</span><br></pre></td></tr></table></figure>
<p>得到映射表<br><img src="/../images/image4-1734689969850-7.png" alt="image4"></p>
<p>001c1d000000000000001e1f202122232425262728292a2b2c2d2e2f303132333435363702030405060708090a0b0c0d0e0f101112131415161718191a1b00000000000000000000000000000000000100000000000000000038003900</p>
<p>随后将flag一一映射过去即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import string  </span><br><span class="line">all_char = string.printable  </span><br><span class="line">#print(all_char)  </span><br><span class="line">table = list(bytes.fromhex(&quot;001c1d000000000000001e1f202122232425262728292a2b2c2d2e2f303132333435363702030405060708090a0b0c0d0e0f101112131415161718191a1b000000000000000000000000000000000100000000000000000038003900&quot;))  </span><br><span class="line">flag = list(bytes.fromhex(&quot;23 29 1E 24 38 0E 15 20 37 0E 05 20 00 0E 37 12 1D 0F 24 01 01 39&quot;))  </span><br><span class="line">for x in flag:  </span><br><span class="line">    if x in table:  </span><br><span class="line">        print(all_char[table.index(x)], end=&quot;&quot;)</span><br><span class="line">#flag_MTczMDc0MzQ2Ng;;&#123;</span><br></pre></td></tr></table></figure>
<p>手动修改一下flag 结合提示第十四位是4 直接改一下即可<br> flag{MTczMDc4MzQ2Ng=&#x3D;}</p>
<h1 id="ezCsky"><a href="#ezCsky" class="headerlink" title="ezCsky"></a>ezCsky</h1><p>ida打开附件 得选择arm去分析 这里走了好多弯 </p>
<p>发现有RC4 猜测rc4加密 找key和密文</p>
<p><img src="/../images/image5-1734689976784-9.png" alt="image5"></p>
<p>找到key 跟进unk_8AA0</p>
<p><img src="/../images/image6-1734689981410-11.png" alt="image6"></p>
<p>找到密文</p>
<p><img src="/../images/image7-1734689987048-13.png" alt="image7"></p>
<p>直接解</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Cipher import ARC4  </span><br><span class="line">encrypt_data= [0x96, 0x8F, 0xB8, 0x08, 0x5D, 0xA7, 0x68, 0x44, 0xF2, 0x64,  </span><br><span class="line">  0x92, 0x64, 0x42, 0x7A, 0x78, 0xE6, 0xEA, 0xC2, 0x78, 0xB8,  </span><br><span class="line">  0x63, 0x9E, 0x5B, 0x3D, 0xD9, 0x28, 0x3F, 0xC8, 0x73, 0x06,  </span><br><span class="line">  0xEE, 0x6B, 0x8D, 0x0C, 0x4B, 0xA3, 0x23, 0xAE, 0xCA, 0x40,  </span><br><span class="line">  0xED, 0xD1] # 加密key  </span><br><span class="line">key = b&#x27;testkey&#x27;     # 加密方法  </span><br><span class="line">key1=ARC4.new(key)  </span><br><span class="line">print(key1.encrypt(bytes(encrypt_data)))         # 解密方法</span><br><span class="line">#b&#x27;\n\r\x06\x1c\x1fTVSWQ\x00\x03\x1d\x14XV\x03\x19\x1c\x00T\x03K\x14X\x07\x02IL\x02\x07\x01Q\x0c\x08\x00\x01\x00\x03\x00O&#125;&#x27;</span><br></pre></td></tr></table></figure>
<p>最后一位是} 前面的都不对 结合左边的符号表有xor函数</p>
<p><img src="/../images/image8-1734689992869-15.png" alt="image8"></p>
<p>猜测进行了异或 但是最后一位没有异或 所以猜测加密的异或可能是<br>flag[i]^&#x3D;flag[i+1]<br>直接写逆向脚本即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Cipher import ARC4  </span><br><span class="line">encrypt_data= [0x96, 0x8F, 0xB8, 0x08, 0x5D, 0xA7, 0x68, 0x44, 0xF2, 0x64,  </span><br><span class="line">  0x92, 0x64, 0x42, 0x7A, 0x78, 0xE6, 0xEA, 0xC2, 0x78, 0xB8,  </span><br><span class="line">  0x63, 0x9E, 0x5B, 0x3D, 0xD9, 0x28, 0x3F, 0xC8, 0x73, 0x06,  </span><br><span class="line">  0xEE, 0x6B, 0x8D, 0x0C, 0x4B, 0xA3, 0x23, 0xAE, 0xCA, 0x40,  </span><br><span class="line">  0xED, 0xD1] # 加密key  </span><br><span class="line">key = b&#x27;testkey&#x27;     # 加密方法  </span><br><span class="line">key1=ARC4.new(key)  </span><br><span class="line">print(key1.encrypt(bytes(encrypt_data)))         # 解密方法  </span><br><span class="line">flag = b&#x27;\n\r\x06\x1c\x1fTVSWQ\x00\x03\x1d\x14XV\x03\x19\x1c\x00T\x03K\x14X\x07\x02IL\x02\x07\x01Q\x0c\x08\x00\x01\x00\x03\x00O&#125;&#x27;  </span><br><span class="line"># 将 flag 转换为 list，便于修改  </span><br><span class="line">flag = list(flag)  </span><br><span class="line">for i in range(len(flag)-1,0,-1):  </span><br><span class="line">    flag[i-1] ^= flag[i]  </span><br><span class="line">    print(chr(flag[i]),end=&#x27;&#x27;)  </span><br><span class="line">chr_flag=&#x27;&#125;22110084edca-dfa9-fe11-47a9-033b5f0d&#123;gal&#x27;  </span><br><span class="line">print(chr_flag[::-1])</span><br><span class="line">#lag&#123;d0f5b330-9a74-11ef-9afd-acde48001122&#125;</span><br></pre></td></tr></table></figure>
<p>少了个f 在前面加上就是正确的flag</p>
]]></content>
  </entry>
</search>
